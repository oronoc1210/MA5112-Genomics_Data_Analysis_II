/*
 * -------------------------------------------------
 *  nf-core/clipseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

params {
  
  config_profile_name = null
  config_profile_description = 'Minimal test dataset to check pipeline function'
  // Limit resources so that this can run on GitHub Actions
  
  outdir = "./results"
  fasta_path = "/data/MSc/2021/clipseq/sirna_trimmed_chr20.fa"
  fastq_path = "/data/MSc/2021/clipseq/sirna_trimmed_chr20.fq.gz"
  gtf_path = "/data/MSc/2021/clipseq/ref/chr20.gtf"
  refgenome_path = "/data/MSc/2021/clipseq/ref/chr20.fa"
  smrna_path = "/data/MSc/2021/clipseq/Homo_sapiens.smallRNA.fa"
  reads = "/data/MSc/2021/clipseq/sirna_trimmed_chr20.fq.gz"
  multiqc_config = "/data/omccaffrey/MA5112/nextflow_assignment/running_clipseq.nf/config_and_docs/multiqc_config.yaml"
  output_docs = "/data/omccaffrey/MA5112/nextflow_assignment/running_clipseq.nf/config_and_docs/output.md"
  trimming = false
  trimming = null
  tracedir = "${params.outdir}/pipeline_info"
  
   // Motif calling
  motif = false
  motif_sample = 1000
}

singularity {
  enabled = true
  autoMounts = true
  cacheDir = '/data/containers'
}
process {
  beforeScript = """
                    module load EasyBuild/3.4.1
                    module load Java/1.8.0_144
                    module load singularity/3.4.1
                 """
                 .stripIndent()
  containerOptions = '-B /data/'
  executor = 'slurm'
  queue = { task.cpus > 8 ? 'highmem' : 'normal' }
  /* Lugh scheduler fails if you try to specify memory (#SBATCH --mem) for jobs */
  withName: '.*' { memory = null }
}

// Container slug.
process.container = 'nfcore/clipseq:1.0.0'

profiles {
  test { includeConfig 'conf/test.config' }
  nuig { includeConfig 'conf/nuig.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}
